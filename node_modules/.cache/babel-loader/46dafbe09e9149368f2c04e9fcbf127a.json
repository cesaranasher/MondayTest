{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.setGCPResidency = exports.getGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jsonBigint = require(\"json-bigint\");\n\nconst gcp_residency_1 = require(\"./gcp-residency\");\n\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */\n\nexports.METADATA_SERVER_DETECTION = Object.freeze({\n  'assume-present': \"don't try to ping the metadata server, but assume it's present\",\n  none: \"don't try to ping the metadata server, but don't try to use it either\",\n  'bios-only': \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n  'ping-only': 'skip the BIOS probe, and go straight to pinging'\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\n\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  } // If no scheme is provided default to HTTP:\n\n\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n\n  return new URL(exports.BASE_PATH, baseUrl).href;\n} // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\n\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\n\nasync function metadataAccessor(type, options) {\n  let noResponseRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  let fastFail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  options = options || {};\n\n  if (typeof options === 'string') {\n    options = {\n      property: options\n    };\n  }\n\n  let property = '';\n\n  if (typeof options === 'object' && options.property) {\n    property = '/' + options.property;\n  }\n\n  validate(options);\n\n  try {\n    const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n    const res = await requestMethod({\n      url: `${getBaseUrl()}/${type}${property}`,\n      headers: Object.assign({}, exports.HEADERS, options.headers),\n      retryConfig: {\n        noResponseRetries\n      },\n      params: options.params,\n      responseType: 'text',\n      timeout: requestTimeout()\n    }); // NOTE: node.js converts all incoming headers to lower case.\n\n    if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n      throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n    } else if (!res.data) {\n      throw new Error('Invalid response from the metadata service');\n    }\n\n    if (typeof res.data === 'string') {\n      try {\n        return jsonBigint.parse(res.data);\n      } catch (_a) {\n        /* ignore */\n      }\n    }\n\n    return res.data;\n  } catch (e) {\n    const err = e;\n\n    if (err.response && err.response.status !== 200) {\n      err.message = `Unsuccessful response status code. ${err.message}`;\n    }\n\n    throw e;\n  }\n}\n\nasync function fastFailMetadataRequest(options) {\n  const secondaryOptions = { ...options,\n    url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n  }; // We race a connection between DNS/IP to metadata server. There are a couple\n  // reasons for this:\n  //\n  // 1. the DNS is slow in some GCP environments; by checking both, we might\n  //    detect the runtime environment signficantly faster.\n  // 2. we can't just check the IP, which is tarpitted and slow to respond\n  //    on a user's local machine.\n  //\n  // Additional logic has been added to make sure that we don't create an\n  // unhandled rejection in scenarios where a failure happens sometime\n  // after a success.\n  //\n  // Note, however, if a failure happens prior to a success, a rejection should\n  // occur, this is for folks running locally.\n  //\n\n  let responded = false;\n  const r1 = (0, gaxios_1.request)(options).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r2;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  const r2 = (0, gaxios_1.request)(secondaryOptions).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r1;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\n\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\n\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\n\nasync function isAvailable() {\n  if (process.env.METADATA_SERVER_DETECTION) {\n    const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n\n    if (!(value in exports.METADATA_SERVER_DETECTION)) {\n      throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join('`, `')}\\`, or unset`);\n    }\n\n    switch (value) {\n      case 'assume-present':\n        return true;\n\n      case 'none':\n        return false;\n\n      case 'bios-only':\n        return getGCPResidency();\n\n      case 'ping-only': // continue, we want to ping the server\n\n    }\n  }\n\n  try {\n    // If a user is instantiating several GCP libraries at the same time,\n    // this may result in multiple calls to isAvailable(), to detect the\n    // runtime environment. We use the same promise for each of these calls\n    // to reduce the network load.\n    if (cachedIsAvailableResponse === undefined) {\n      cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), // If the default HOST_ADDRESS has been overridden, we should not\n      // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n      // a non-GCP environment):\n      !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n    }\n\n    await cachedIsAvailableResponse;\n    return true;\n  } catch (e) {\n    const err = e;\n\n    if (process.env.DEBUG_AUTH) {\n      console.info(err);\n    }\n\n    if (err.type === 'request-timeout') {\n      // If running in a GCP environment, metadata endpoint should return\n      // within ms.\n      return false;\n    }\n\n    if (err.response && err.response.status === 404) {\n      return false;\n    } else {\n      if (!(err.response && err.response.status === 404) && ( // A warning is emitted if we see an unexpected err.code, or err.code\n      // is not populated:\n      !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code))) {\n        let code = 'UNKNOWN';\n        if (err.code) code = err.code;\n        process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n      } // Failure to resolve the metadata service means that it is not available.\n\n\n      return false;\n    }\n  }\n}\n\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\n\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\n\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\n\nexports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */\n\nfunction getGCPResidency() {\n  if (exports.gcpResidencyCache === null) {\n    setGCPResidency();\n  }\n\n  return exports.gcpResidencyCache;\n}\n\nexports.getGCPResidency = getGCPResidency;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */\n\nfunction setGCPResidency() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\n\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\n\nfunction requestTimeout() {\n  return getGCPResidency() ? 0 : 3000;\n}\n\nexports.requestTimeout = requestTimeout;\n\n__exportStar(require(\"./gcp-residency\"), exports);","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","none","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","fastFail","property","requestMethod","fastFailMetadataRequest","gaxios_1","res","url","headers","assign","retryConfig","params","responseType","timeout","requestTimeout","toLowerCase","data","jsonBigint","parse","e","err","response","status","message","secondaryOptions","replace","responded","r1","then","catch","r2","Promise","race","instance","project","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","isAvailable","METADATA_SERVER_DETECTION","value","trim","toLocaleLowerCase","RangeError","join","getGCPResidency","undefined","DEBUG_AUTH","console","info","code","includes","emitWarning","resetIsAvailableCache","setGCPResidency","__exportStar"],"sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}