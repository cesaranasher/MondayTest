{"ast":null,"code":"import { createCipheriv, createDecipheriv, createHash } from 'node:crypto';\nvar MOCK_INIT_VECTOR = Buffer.from('0123456789abcdef', 'utf-8');\nvar MOCK_SECRET = 'They donâ€™t know that we know they know we know';\nvar MOCK_SECURE_STRING = createHash('sha256').update(String(MOCK_SECRET)).digest('base64');\nvar MOCK_SECURE_STRING_BASE_64 = Buffer.from(MOCK_SECURE_STRING, 'base64');\nexport var generateBase64Secret = function (secret) {\n  var secretHash = createHash('sha256').update(String(secret)).digest('base64');\n  var base64Secret = Buffer.from(secretHash, 'base64');\n  return base64Secret;\n};\nexport var encrypt = function (text, base64Secret, initVector) {\n  if (base64Secret === void 0) {\n    base64Secret = MOCK_SECURE_STRING_BASE_64;\n  }\n\n  if (initVector === void 0) {\n    initVector = MOCK_INIT_VECTOR;\n  }\n\n  var cipher = createCipheriv('aes-256-cbc', base64Secret, initVector);\n  var ciphered = cipher.update(text, 'utf8', 'hex');\n  ciphered += cipher.final('hex');\n  return ciphered;\n};\nexport var decrypt = function (text, base64Secret, initVector) {\n  if (base64Secret === void 0) {\n    base64Secret = MOCK_SECURE_STRING_BASE_64;\n  }\n\n  if (initVector === void 0) {\n    initVector = MOCK_INIT_VECTOR;\n  }\n\n  var decipher = createDecipheriv('aes-256-cbc', base64Secret, initVector);\n  var deciphered = decipher.update(text, 'hex', 'utf8');\n  deciphered += decipher.final('utf8');\n  return deciphered;\n};","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,EAA2CC,UAA3C,QAA6D,aAA7D;AAEA,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAY,kBAAZ,EAAgC,OAAhC,CAAzB;AACA,IAAMC,WAAW,GAAG,gDAApB;AACA,IAAMC,kBAAkB,GAAGL,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BC,MAAM,CAACH,WAAD,CAAlC,EAAiDI,MAAjD,CAAwD,QAAxD,CAA3B;AACA,IAAMC,0BAA0B,GAAGP,MAAM,CAACC,IAAP,CAAYE,kBAAZ,EAAgC,QAAhC,CAAnC;AAEA,OAAO,IAAMK,oBAAoB,GAAG,UAACC,MAAD,EAAe;EACjD,IAAMC,UAAU,GAAGZ,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BC,MAAM,CAACI,MAAD,CAAlC,EAA4CH,MAA5C,CAAmD,QAAnD,CAAnB;EACA,IAAMK,YAAY,GAAGX,MAAM,CAACC,IAAP,CAAYS,UAAZ,EAAwB,QAAxB,CAArB;EAEA,OAAOC,YAAP;AACD,CALM;AAOP,OAAO,IAAMC,OAAO,GAAG,UAACC,IAAD,EAAeF,YAAf,EAA0DG,UAA1D,EAAuF;EAAxE;IAAAH;EAAyC;;EAAE;IAAAG;EAA6B;;EAC5G,IAAMC,MAAM,GAAGnB,cAAc,CAAC,aAAD,EAAgBe,YAAhB,EAA8BG,UAA9B,CAA7B;EACA,IAAIE,QAAQ,GAAGD,MAAM,CAACX,MAAP,CAAcS,IAAd,EAAoB,MAApB,EAA4B,KAA5B,CAAf;EACAG,QAAQ,IAAID,MAAM,CAACE,KAAP,CAAa,KAAb,CAAZ;EACA,OAAOD,QAAP;AACD,CALM;AAOP,OAAO,IAAME,OAAO,GAAG,UAACL,IAAD,EAAeF,YAAf,EAA0DG,UAA1D,EAAuF;EAAxE;IAAAH;EAAyC;;EAAE;IAAAG;EAA6B;;EAC5G,IAAMK,QAAQ,GAAGtB,gBAAgB,CAAC,aAAD,EAAgBc,YAAhB,EAA8BG,UAA9B,CAAjC;EACA,IAAIM,UAAU,GAAGD,QAAQ,CAACf,MAAT,CAAgBS,IAAhB,EAAsB,KAAtB,EAA6B,MAA7B,CAAjB;EACAO,UAAU,IAAID,QAAQ,CAACF,KAAT,CAAe,MAAf,CAAd;EACA,OAAOG,UAAP;AACD,CALM","names":["createCipheriv","createDecipheriv","createHash","MOCK_INIT_VECTOR","Buffer","from","MOCK_SECRET","MOCK_SECURE_STRING","update","String","digest","MOCK_SECURE_STRING_BASE_64","generateBase64Secret","secret","secretHash","base64Secret","encrypt","text","initVector","cipher","ciphered","final","decrypt","decipher","deciphered"],"sources":["../../../lib/utils/cipher.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}