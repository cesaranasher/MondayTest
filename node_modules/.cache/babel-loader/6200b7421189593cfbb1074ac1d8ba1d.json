{"ast":null,"code":"'use strict';\n\nconst format = require('quick-format-unescaped');\n\nmodule.exports = pino;\n\nconst _console = pfGlobalThisOrFallback().console || {};\n\nconst stdSerializers = {\n  mapHttpRequest: mock,\n  mapHttpResponse: mock,\n  wrapRequestSerializer: passthrough,\n  wrapResponseSerializer: passthrough,\n  wrapErrorSerializer: passthrough,\n  req: mock,\n  res: mock,\n  err: asErrValue,\n  errWithCause: asErrValue\n};\n\nfunction levelToValue(level, logger) {\n  return level === 'silent' ? Infinity : logger.levels.values[level];\n}\n\nconst baseLogFunctionSymbol = Symbol('pino.logFuncs');\nconst hierarchySymbol = Symbol('pino.hierarchy');\nconst logFallbackMap = {\n  error: 'log',\n  fatal: 'error',\n  warn: 'error',\n  info: 'log',\n  debug: 'log',\n  trace: 'log'\n};\n\nfunction appendChildLogger(parentLogger, childLogger) {\n  const newEntry = {\n    logger: childLogger,\n    parent: parentLogger[hierarchySymbol]\n  };\n  childLogger[hierarchySymbol] = newEntry;\n}\n\nfunction setupBaseLogFunctions(logger, levels, proto) {\n  const logFunctions = {};\n  levels.forEach(level => {\n    logFunctions[level] = proto[level] ? proto[level] : _console[level] || _console[logFallbackMap[level] || 'log'] || noop;\n  });\n  logger[baseLogFunctionSymbol] = logFunctions;\n}\n\nfunction shouldSerialize(serialize, serializers) {\n  if (Array.isArray(serialize)) {\n    const hasToFilter = serialize.filter(function (k) {\n      return k !== '!stdSerializers.err';\n    });\n    return hasToFilter;\n  } else if (serialize === true) {\n    return Object.keys(serializers);\n  }\n\n  return false;\n}\n\nfunction pino(opts) {\n  opts = opts || {};\n  opts.browser = opts.browser || {};\n  const transmit = opts.browser.transmit;\n\n  if (transmit && typeof transmit.send !== 'function') {\n    throw Error('pino: transmit option must have a send function');\n  }\n\n  const proto = opts.browser.write || _console;\n  if (opts.browser.write) opts.browser.asObject = true;\n  const serializers = opts.serializers || {};\n  const serialize = shouldSerialize(opts.browser.serialize, serializers);\n  let stdErrSerialize = opts.browser.serialize;\n  if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf('!stdSerializers.err') > -1) stdErrSerialize = false;\n  const customLevels = Object.keys(opts.customLevels || {});\n  const levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace'].concat(customLevels);\n\n  if (typeof proto === 'function') {\n    levels.forEach(function (level) {\n      proto[level] = proto;\n    });\n  }\n\n  if (opts.enabled === false || opts.browser.disabled) opts.level = 'silent';\n  const level = opts.level || 'info';\n  const logger = Object.create(proto);\n  if (!logger.log) logger.log = noop;\n  setupBaseLogFunctions(logger, levels, proto); // setup root hierarchy entry\n\n  appendChildLogger({}, logger);\n  Object.defineProperty(logger, 'levelVal', {\n    get: getLevelVal\n  });\n  Object.defineProperty(logger, 'level', {\n    get: getLevel,\n    set: setLevel\n  });\n  const setOpts = {\n    transmit,\n    serialize,\n    asObject: opts.browser.asObject,\n    levels,\n    timestamp: getTimeFunction(opts)\n  };\n  logger.levels = getLevels(opts);\n  logger.level = level;\n  logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;\n  logger.serializers = serializers;\n  logger._serialize = serialize;\n  logger._stdErrSerialize = stdErrSerialize;\n  logger.child = child;\n  if (transmit) logger._logEvent = createLogEventShape();\n\n  function getLevelVal() {\n    return levelToValue(this.level, this);\n  }\n\n  function getLevel() {\n    return this._level;\n  }\n\n  function setLevel(level) {\n    if (level !== 'silent' && !this.levels.values[level]) {\n      throw Error('unknown level ' + level);\n    }\n\n    this._level = level;\n    set(this, setOpts, logger, 'error'); // <-- must stay first\n\n    set(this, setOpts, logger, 'fatal');\n    set(this, setOpts, logger, 'warn');\n    set(this, setOpts, logger, 'info');\n    set(this, setOpts, logger, 'debug');\n    set(this, setOpts, logger, 'trace');\n    customLevels.forEach(level => {\n      set(this, setOpts, logger, level);\n    });\n  }\n\n  function child(bindings, childOptions) {\n    if (!bindings) {\n      throw new Error('missing bindings for child Pino');\n    }\n\n    childOptions = childOptions || {};\n\n    if (serialize && bindings.serializers) {\n      childOptions.serializers = bindings.serializers;\n    }\n\n    const childOptionsSerializers = childOptions.serializers;\n\n    if (serialize && childOptionsSerializers) {\n      var childSerializers = Object.assign({}, serializers, childOptionsSerializers);\n      var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;\n      delete bindings.serializers;\n      applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);\n    }\n\n    function Child(parent) {\n      this._childLevel = (parent._childLevel | 0) + 1; // make sure bindings are available in the `set` function\n\n      this.bindings = bindings;\n\n      if (childSerializers) {\n        this.serializers = childSerializers;\n        this._serialize = childSerialize;\n      }\n\n      if (transmit) {\n        this._logEvent = createLogEventShape([].concat(parent._logEvent.bindings, bindings));\n      }\n    }\n\n    Child.prototype = this;\n    const newLogger = new Child(this); // must happen before the level is assigned\n\n    appendChildLogger(this, newLogger); // required to actually initialize the logger functions for any given child\n\n    newLogger.level = this.level;\n    return newLogger;\n  }\n\n  return logger;\n}\n\nfunction getLevels(opts) {\n  const customLevels = opts.customLevels || {};\n  const values = Object.assign({}, pino.levels.values, customLevels);\n  const labels = Object.assign({}, pino.levels.labels, invertObject(customLevels));\n  return {\n    values,\n    labels\n  };\n}\n\nfunction invertObject(obj) {\n  const inverted = {};\n  Object.keys(obj).forEach(function (key) {\n    inverted[obj[key]] = key;\n  });\n  return inverted;\n}\n\npino.levels = {\n  values: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  labels: {\n    10: 'trace',\n    20: 'debug',\n    30: 'info',\n    40: 'warn',\n    50: 'error',\n    60: 'fatal'\n  }\n};\npino.stdSerializers = stdSerializers;\npino.stdTimeFunctions = Object.assign({}, {\n  nullTime,\n  epochTime,\n  unixTime,\n  isoTime\n});\n\nfunction getBindingChain(logger) {\n  const bindings = [];\n\n  if (logger.bindings) {\n    bindings.push(logger.bindings);\n  } // traverse up the tree to get all bindings\n\n\n  let hierarchy = logger[hierarchySymbol];\n\n  while (hierarchy.parent) {\n    hierarchy = hierarchy.parent;\n\n    if (hierarchy.logger.bindings) {\n      bindings.push(hierarchy.logger.bindings);\n    }\n  }\n\n  return bindings.reverse();\n}\n\nfunction set(self, opts, rootLogger, level) {\n  // override the current log functions with either `noop` or the base log function\n  self[level] = levelToValue(self.level, rootLogger) > levelToValue(level, rootLogger) ? noop : rootLogger[baseLogFunctionSymbol][level];\n\n  if (!opts.transmit && self[level] === noop) {\n    return;\n  } // make sure the log format is correct\n\n\n  self[level] = createWrap(self, opts, rootLogger, level); // prepend bindings if it is not the root logger\n\n  const bindings = getBindingChain(self);\n\n  if (bindings.length === 0) {\n    // early exit in case for rootLogger\n    return;\n  }\n\n  self[level] = prependBindingsInArguments(bindings, self[level]);\n}\n\nfunction prependBindingsInArguments(bindings, logFunc) {\n  return function () {\n    return logFunc.apply(this, [...bindings, ...arguments]);\n  };\n}\n\nfunction createWrap(self, opts, rootLogger, level) {\n  return function (write) {\n    return function LOG() {\n      const ts = opts.timestamp();\n      const args = new Array(arguments.length);\n      const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;\n\n      for (var i = 0; i < args.length; i++) args[i] = arguments[i];\n\n      if (opts.serialize && !opts.asObject) {\n        applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);\n      }\n\n      if (opts.asObject) write.call(proto, asObject(this, level, args, ts));else write.apply(proto, args);\n\n      if (opts.transmit) {\n        const transmitLevel = opts.transmit.level || self._level;\n        const transmitValue = rootLogger.levels.values[transmitLevel];\n        const methodValue = rootLogger.levels.values[level];\n        if (methodValue < transmitValue) return;\n        transmit(this, {\n          ts,\n          methodLevel: level,\n          methodValue,\n          transmitLevel,\n          transmitValue: rootLogger.levels.values[opts.transmit.level || self._level],\n          send: opts.transmit.send,\n          val: levelToValue(self._level, rootLogger)\n        }, args);\n      }\n    };\n  }(self[baseLogFunctionSymbol][level]);\n}\n\nfunction asObject(logger, level, args, ts) {\n  if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);\n  const argsCloned = args.slice();\n  let msg = argsCloned[0];\n  const o = {};\n\n  if (ts) {\n    o.time = ts;\n  }\n\n  o.level = logger.levels.values[level];\n  let lvl = (logger._childLevel | 0) + 1;\n  if (lvl < 1) lvl = 1; // deliberate, catching objects, arrays\n\n  if (msg !== null && typeof msg === 'object') {\n    while (lvl-- && typeof argsCloned[0] === 'object') {\n      Object.assign(o, argsCloned.shift());\n    }\n\n    msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined;\n  } else if (typeof msg === 'string') msg = format(argsCloned.shift(), argsCloned);\n\n  if (msg !== undefined) o.msg = msg;\n  return o;\n}\n\nfunction applySerializers(args, serialize, serializers, stdErrSerialize) {\n  for (const i in args) {\n    if (stdErrSerialize && args[i] instanceof Error) {\n      args[i] = pino.stdSerializers.err(args[i]);\n    } else if (typeof args[i] === 'object' && !Array.isArray(args[i])) {\n      for (const k in args[i]) {\n        if (serialize && serialize.indexOf(k) > -1 && k in serializers) {\n          args[i][k] = serializers[k](args[i][k]);\n        }\n      }\n    }\n  }\n}\n\nfunction transmit(logger, opts, args) {\n  const send = opts.send;\n  const ts = opts.ts;\n  const methodLevel = opts.methodLevel;\n  const methodValue = opts.methodValue;\n  const val = opts.val;\n  const bindings = logger._logEvent.bindings;\n  applySerializers(args, logger._serialize || Object.keys(logger.serializers), logger.serializers, logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize);\n  logger._logEvent.ts = ts;\n  logger._logEvent.messages = args.filter(function (arg) {\n    // bindings can only be objects, so reference equality check via indexOf is fine\n    return bindings.indexOf(arg) === -1;\n  });\n  logger._logEvent.level.label = methodLevel;\n  logger._logEvent.level.value = methodValue;\n  send(methodLevel, logger._logEvent, val);\n  logger._logEvent = createLogEventShape(bindings);\n}\n\nfunction createLogEventShape(bindings) {\n  return {\n    ts: 0,\n    messages: [],\n    bindings: bindings || [],\n    level: {\n      label: '',\n      value: 0\n    }\n  };\n}\n\nfunction asErrValue(err) {\n  const obj = {\n    type: err.constructor.name,\n    msg: err.message,\n    stack: err.stack\n  };\n\n  for (const key in err) {\n    if (obj[key] === undefined) {\n      obj[key] = err[key];\n    }\n  }\n\n  return obj;\n}\n\nfunction getTimeFunction(opts) {\n  if (typeof opts.timestamp === 'function') {\n    return opts.timestamp;\n  }\n\n  if (opts.timestamp === false) {\n    return nullTime;\n  }\n\n  return epochTime;\n}\n\nfunction mock() {\n  return {};\n}\n\nfunction passthrough(a) {\n  return a;\n}\n\nfunction noop() {}\n\nfunction nullTime() {\n  return false;\n}\n\nfunction epochTime() {\n  return Date.now();\n}\n\nfunction unixTime() {\n  return Math.round(Date.now() / 1000.0);\n}\n\nfunction isoTime() {\n  return new Date(Date.now()).toISOString();\n} // using Date.now() for testability\n\n/* eslint-disable */\n\n/* istanbul ignore next */\n\n\nfunction pfGlobalThisOrFallback() {\n  function defd(o) {\n    return typeof o !== 'undefined' && o;\n  }\n\n  try {\n    if (typeof globalThis !== 'undefined') return globalThis;\n    Object.defineProperty(Object.prototype, 'globalThis', {\n      get: function () {\n        delete Object.prototype.globalThis;\n        return this.globalThis = this;\n      },\n      configurable: true\n    });\n    return globalThis;\n  } catch (e) {\n    return defd(self) || defd(window) || defd(this) || {};\n  }\n}\n/* eslint-enable */\n\n\nmodule.exports.default = pino;\nmodule.exports.pino = pino;","map":{"version":3,"names":["format","require","module","exports","pino","_console","pfGlobalThisOrFallback","console","stdSerializers","mapHttpRequest","mock","mapHttpResponse","wrapRequestSerializer","passthrough","wrapResponseSerializer","wrapErrorSerializer","req","res","err","asErrValue","errWithCause","levelToValue","level","logger","Infinity","levels","values","baseLogFunctionSymbol","Symbol","hierarchySymbol","logFallbackMap","error","fatal","warn","info","debug","trace","appendChildLogger","parentLogger","childLogger","newEntry","parent","setupBaseLogFunctions","proto","logFunctions","forEach","noop","shouldSerialize","serialize","serializers","Array","isArray","hasToFilter","filter","k","Object","keys","opts","browser","transmit","send","Error","write","asObject","stdErrSerialize","indexOf","customLevels","concat","enabled","disabled","create","log","defineProperty","get","getLevelVal","getLevel","set","setLevel","setOpts","timestamp","getTimeFunction","getLevels","setMaxListeners","getMaxListeners","emit","addListener","on","prependListener","once","prependOnceListener","removeListener","removeAllListeners","listeners","listenerCount","eventNames","flush","_serialize","_stdErrSerialize","child","_logEvent","createLogEventShape","_level","bindings","childOptions","childOptionsSerializers","childSerializers","assign","childSerialize","applySerializers","Child","_childLevel","prototype","newLogger","labels","invertObject","obj","inverted","key","stdTimeFunctions","nullTime","epochTime","unixTime","isoTime","getBindingChain","push","hierarchy","reverse","self","rootLogger","createWrap","length","prependBindingsInArguments","logFunc","apply","arguments","LOG","ts","args","getPrototypeOf","i","call","transmitLevel","transmitValue","methodValue","methodLevel","val","argsCloned","slice","msg","o","time","lvl","shift","undefined","messages","arg","label","value","type","constructor","name","message","stack","a","Date","now","Math","round","toISOString","defd","globalThis","configurable","e","window","default"],"sources":["/Users/cesaranasco/Documents/EMPRESAS/HERZUM/ESTADOS UNIDOS/BITBUCKET/welcome-apps-master/apps/quickstart-react/node_modules/pino/browser.js"],"sourcesContent":["'use strict'\n\nconst format = require('quick-format-unescaped')\n\nmodule.exports = pino\n\nconst _console = pfGlobalThisOrFallback().console || {}\nconst stdSerializers = {\n  mapHttpRequest: mock,\n  mapHttpResponse: mock,\n  wrapRequestSerializer: passthrough,\n  wrapResponseSerializer: passthrough,\n  wrapErrorSerializer: passthrough,\n  req: mock,\n  res: mock,\n  err: asErrValue,\n  errWithCause: asErrValue\n}\nfunction levelToValue (level, logger) {\n  return level === 'silent'\n    ? Infinity\n    : logger.levels.values[level]\n}\nconst baseLogFunctionSymbol = Symbol('pino.logFuncs')\nconst hierarchySymbol = Symbol('pino.hierarchy')\n\nconst logFallbackMap = {\n  error: 'log',\n  fatal: 'error',\n  warn: 'error',\n  info: 'log',\n  debug: 'log',\n  trace: 'log'\n}\n\nfunction appendChildLogger (parentLogger, childLogger) {\n  const newEntry = {\n    logger: childLogger,\n    parent: parentLogger[hierarchySymbol]\n  }\n  childLogger[hierarchySymbol] = newEntry\n}\n\nfunction setupBaseLogFunctions (logger, levels, proto) {\n  const logFunctions = {}\n  levels.forEach(level => {\n    logFunctions[level] = proto[level] ? proto[level] : (_console[level] || _console[logFallbackMap[level] || 'log'] || noop)\n  })\n  logger[baseLogFunctionSymbol] = logFunctions\n}\n\nfunction shouldSerialize (serialize, serializers) {\n  if (Array.isArray(serialize)) {\n    const hasToFilter = serialize.filter(function (k) {\n      return k !== '!stdSerializers.err'\n    })\n    return hasToFilter\n  } else if (serialize === true) {\n    return Object.keys(serializers)\n  }\n\n  return false\n}\n\nfunction pino (opts) {\n  opts = opts || {}\n  opts.browser = opts.browser || {}\n\n  const transmit = opts.browser.transmit\n  if (transmit && typeof transmit.send !== 'function') { throw Error('pino: transmit option must have a send function') }\n\n  const proto = opts.browser.write || _console\n  if (opts.browser.write) opts.browser.asObject = true\n  const serializers = opts.serializers || {}\n  const serialize = shouldSerialize(opts.browser.serialize, serializers)\n  let stdErrSerialize = opts.browser.serialize\n\n  if (\n    Array.isArray(opts.browser.serialize) &&\n    opts.browser.serialize.indexOf('!stdSerializers.err') > -1\n  ) stdErrSerialize = false\n\n  const customLevels = Object.keys(opts.customLevels || {})\n  const levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace'].concat(customLevels)\n\n  if (typeof proto === 'function') {\n    levels.forEach(function (level) {\n      proto[level] = proto\n    })\n  }\n  if (opts.enabled === false || opts.browser.disabled) opts.level = 'silent'\n  const level = opts.level || 'info'\n  const logger = Object.create(proto)\n  if (!logger.log) logger.log = noop\n\n  setupBaseLogFunctions(logger, levels, proto)\n  // setup root hierarchy entry\n  appendChildLogger({}, logger)\n\n  Object.defineProperty(logger, 'levelVal', {\n    get: getLevelVal\n  })\n  Object.defineProperty(logger, 'level', {\n    get: getLevel,\n    set: setLevel\n  })\n\n  const setOpts = {\n    transmit,\n    serialize,\n    asObject: opts.browser.asObject,\n    levels,\n    timestamp: getTimeFunction(opts)\n  }\n  logger.levels = getLevels(opts)\n  logger.level = level\n\n  logger.setMaxListeners = logger.getMaxListeners =\n  logger.emit = logger.addListener = logger.on =\n  logger.prependListener = logger.once =\n  logger.prependOnceListener = logger.removeListener =\n  logger.removeAllListeners = logger.listeners =\n  logger.listenerCount = logger.eventNames =\n  logger.write = logger.flush = noop\n  logger.serializers = serializers\n  logger._serialize = serialize\n  logger._stdErrSerialize = stdErrSerialize\n  logger.child = child\n\n  if (transmit) logger._logEvent = createLogEventShape()\n\n  function getLevelVal () {\n    return levelToValue(this.level, this)\n  }\n\n  function getLevel () {\n    return this._level\n  }\n  function setLevel (level) {\n    if (level !== 'silent' && !this.levels.values[level]) {\n      throw Error('unknown level ' + level)\n    }\n    this._level = level\n\n    set(this, setOpts, logger, 'error') // <-- must stay first\n    set(this, setOpts, logger, 'fatal')\n    set(this, setOpts, logger, 'warn')\n    set(this, setOpts, logger, 'info')\n    set(this, setOpts, logger, 'debug')\n    set(this, setOpts, logger, 'trace')\n\n    customLevels.forEach((level) => {\n      set(this, setOpts, logger, level)\n    })\n  }\n\n  function child (bindings, childOptions) {\n    if (!bindings) {\n      throw new Error('missing bindings for child Pino')\n    }\n    childOptions = childOptions || {}\n    if (serialize && bindings.serializers) {\n      childOptions.serializers = bindings.serializers\n    }\n    const childOptionsSerializers = childOptions.serializers\n    if (serialize && childOptionsSerializers) {\n      var childSerializers = Object.assign({}, serializers, childOptionsSerializers)\n      var childSerialize = opts.browser.serialize === true\n        ? Object.keys(childSerializers)\n        : serialize\n      delete bindings.serializers\n      applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize)\n    }\n    function Child (parent) {\n      this._childLevel = (parent._childLevel | 0) + 1\n\n      // make sure bindings are available in the `set` function\n      this.bindings = bindings\n\n      if (childSerializers) {\n        this.serializers = childSerializers\n        this._serialize = childSerialize\n      }\n      if (transmit) {\n        this._logEvent = createLogEventShape(\n          [].concat(parent._logEvent.bindings, bindings)\n        )\n      }\n    }\n    Child.prototype = this\n    const newLogger = new Child(this)\n\n    // must happen before the level is assigned\n    appendChildLogger(this, newLogger)\n    // required to actually initialize the logger functions for any given child\n    newLogger.level = this.level\n\n    return newLogger\n  }\n  return logger\n}\n\nfunction getLevels (opts) {\n  const customLevels = opts.customLevels || {}\n\n  const values = Object.assign({}, pino.levels.values, customLevels)\n  const labels = Object.assign({}, pino.levels.labels, invertObject(customLevels))\n\n  return {\n    values,\n    labels\n  }\n}\n\nfunction invertObject (obj) {\n  const inverted = {}\n  Object.keys(obj).forEach(function (key) {\n    inverted[obj[key]] = key\n  })\n  return inverted\n}\n\npino.levels = {\n  values: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  labels: {\n    10: 'trace',\n    20: 'debug',\n    30: 'info',\n    40: 'warn',\n    50: 'error',\n    60: 'fatal'\n  }\n}\n\npino.stdSerializers = stdSerializers\npino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime })\n\nfunction getBindingChain (logger) {\n  const bindings = []\n  if (logger.bindings) {\n    bindings.push(logger.bindings)\n  }\n\n  // traverse up the tree to get all bindings\n  let hierarchy = logger[hierarchySymbol]\n  while (hierarchy.parent) {\n    hierarchy = hierarchy.parent\n    if (hierarchy.logger.bindings) {\n      bindings.push(hierarchy.logger.bindings)\n    }\n  }\n\n  return bindings.reverse()\n}\n\nfunction set (self, opts, rootLogger, level) {\n  // override the current log functions with either `noop` or the base log function\n  self[level] = levelToValue(self.level, rootLogger) > levelToValue(level, rootLogger)\n    ? noop\n    : rootLogger[baseLogFunctionSymbol][level]\n\n  if (!opts.transmit && self[level] === noop) {\n    return\n  }\n\n  // make sure the log format is correct\n  self[level] = createWrap(self, opts, rootLogger, level)\n\n  // prepend bindings if it is not the root logger\n  const bindings = getBindingChain(self)\n  if (bindings.length === 0) {\n    // early exit in case for rootLogger\n    return\n  }\n  self[level] = prependBindingsInArguments(bindings, self[level])\n}\n\nfunction prependBindingsInArguments (bindings, logFunc) {\n  return function () {\n    return logFunc.apply(this, [...bindings, ...arguments])\n  }\n}\n\nfunction createWrap (self, opts, rootLogger, level) {\n  return (function (write) {\n    return function LOG () {\n      const ts = opts.timestamp()\n      const args = new Array(arguments.length)\n      const proto = (Object.getPrototypeOf && Object.getPrototypeOf(this) === _console) ? _console : this\n      for (var i = 0; i < args.length; i++) args[i] = arguments[i]\n\n      if (opts.serialize && !opts.asObject) {\n        applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize)\n      }\n      if (opts.asObject) write.call(proto, asObject(this, level, args, ts))\n      else write.apply(proto, args)\n\n      if (opts.transmit) {\n        const transmitLevel = opts.transmit.level || self._level\n        const transmitValue = rootLogger.levels.values[transmitLevel]\n        const methodValue = rootLogger.levels.values[level]\n        if (methodValue < transmitValue) return\n        transmit(this, {\n          ts,\n          methodLevel: level,\n          methodValue,\n          transmitLevel,\n          transmitValue: rootLogger.levels.values[opts.transmit.level || self._level],\n          send: opts.transmit.send,\n          val: levelToValue(self._level, rootLogger)\n        }, args)\n      }\n    }\n  })(self[baseLogFunctionSymbol][level])\n}\n\nfunction asObject (logger, level, args, ts) {\n  if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize)\n  const argsCloned = args.slice()\n  let msg = argsCloned[0]\n  const o = {}\n  if (ts) {\n    o.time = ts\n  }\n  o.level = logger.levels.values[level]\n  let lvl = (logger._childLevel | 0) + 1\n  if (lvl < 1) lvl = 1\n  // deliberate, catching objects, arrays\n  if (msg !== null && typeof msg === 'object') {\n    while (lvl-- && typeof argsCloned[0] === 'object') {\n      Object.assign(o, argsCloned.shift())\n    }\n    msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined\n  } else if (typeof msg === 'string') msg = format(argsCloned.shift(), argsCloned)\n  if (msg !== undefined) o.msg = msg\n  return o\n}\n\nfunction applySerializers (args, serialize, serializers, stdErrSerialize) {\n  for (const i in args) {\n    if (stdErrSerialize && args[i] instanceof Error) {\n      args[i] = pino.stdSerializers.err(args[i])\n    } else if (typeof args[i] === 'object' && !Array.isArray(args[i])) {\n      for (const k in args[i]) {\n        if (serialize && serialize.indexOf(k) > -1 && k in serializers) {\n          args[i][k] = serializers[k](args[i][k])\n        }\n      }\n    }\n  }\n}\n\nfunction transmit (logger, opts, args) {\n  const send = opts.send\n  const ts = opts.ts\n  const methodLevel = opts.methodLevel\n  const methodValue = opts.methodValue\n  const val = opts.val\n  const bindings = logger._logEvent.bindings\n\n  applySerializers(\n    args,\n    logger._serialize || Object.keys(logger.serializers),\n    logger.serializers,\n    logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize\n  )\n  logger._logEvent.ts = ts\n  logger._logEvent.messages = args.filter(function (arg) {\n    // bindings can only be objects, so reference equality check via indexOf is fine\n    return bindings.indexOf(arg) === -1\n  })\n\n  logger._logEvent.level.label = methodLevel\n  logger._logEvent.level.value = methodValue\n\n  send(methodLevel, logger._logEvent, val)\n\n  logger._logEvent = createLogEventShape(bindings)\n}\n\nfunction createLogEventShape (bindings) {\n  return {\n    ts: 0,\n    messages: [],\n    bindings: bindings || [],\n    level: { label: '', value: 0 }\n  }\n}\n\nfunction asErrValue (err) {\n  const obj = {\n    type: err.constructor.name,\n    msg: err.message,\n    stack: err.stack\n  }\n  for (const key in err) {\n    if (obj[key] === undefined) {\n      obj[key] = err[key]\n    }\n  }\n  return obj\n}\n\nfunction getTimeFunction (opts) {\n  if (typeof opts.timestamp === 'function') {\n    return opts.timestamp\n  }\n  if (opts.timestamp === false) {\n    return nullTime\n  }\n  return epochTime\n}\n\nfunction mock () { return {} }\nfunction passthrough (a) { return a }\nfunction noop () {}\n\nfunction nullTime () { return false }\nfunction epochTime () { return Date.now() }\nfunction unixTime () { return Math.round(Date.now() / 1000.0) }\nfunction isoTime () { return new Date(Date.now()).toISOString() } // using Date.now() for testability\n\n/* eslint-disable */\n/* istanbul ignore next */\nfunction pfGlobalThisOrFallback () {\n  function defd (o) { return typeof o !== 'undefined' && o }\n  try {\n    if (typeof globalThis !== 'undefined') return globalThis\n    Object.defineProperty(Object.prototype, 'globalThis', {\n      get: function () {\n        delete Object.prototype.globalThis\n        return (this.globalThis = this)\n      },\n      configurable: true\n    })\n    return globalThis\n  } catch (e) {\n    return defd(self) || defd(window) || defd(this) || {}\n  }\n}\n/* eslint-enable */\n\nmodule.exports.default = pino\nmodule.exports.pino = pino\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}